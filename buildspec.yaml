version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - echo "Performing Trivy file scan before building the image..."
      - wget https://github.com/aquasecurity/trivy/releases/download/v0.19.2/trivy_0.19.2_Linux-64bit.tar.gz
      - tar zxvf trivy_0.19.2_Linux-64bit.tar.gz
      - export PATH=$PATH:$PWD
      - trivy filesystem --exit-code 0 --no-progress . >> trivyfilescan.txt
      - echo "Trivy file scan complete."

      - echo "Downloading and installing OWASP Dependency-Check..."
      - wget https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.2/dependency-check-7.0.2-release.zip
      - unzip dependency-check-7.0.2-release.zip

      - echo "Downloading and setting up SonarQube Scanner..."
      - export SONAR_SCANNER_VERSION=4.7.0.2747
      - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
      - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      - export SONAR_SCANNER_OPTS="-server"

  build:
    commands:
      - echo "Running tests..."
      - echo "Building Docker image..."
      - echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USERNAME" --password-stdin "$DOCKER_REGISTRY_URL"
      - docker build -t "$DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_USERNAME/swiggy:latest" .
      - docker push "$DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_USERNAME/swiggy:latest"

  post_build:
    commands:
      - echo "Performing Trivy image scan after building the image..."
      - trivy image "$DOCKER_REGISTRY_URL/$DOCKER_REGISTRY_USERNAME/swiggy:latest" >> trivyimage.txt
      - echo "Trivy image scan complete."

      - echo "Running OWASP Dependency-Check scan..."
      - cd dependency-check/bin
      - ./dependency-check.sh --scan . --format ALL

      - echo "Printing contents of dependency-check/bin/reports/ directory..."
      - ls -l dependency-check/bin/reports/  # List files for verification
      - cat dependency-check/bin/reports/*.html  # Example: Print HTML reports
      
      - echo "Running SonarQube analysis..."
      - sonar-scanner -Dsonar.projectKey=soanrqube -Dsonar.sources=. -Dsonar.host.url=http://54.198.126.47:9000/
      - echo "SonarQube analysis complete."

      # Copy artifacts to S3 with echo commands for verification
      - echo "Copying Trivy file scan results to S3..."
      - aws s3 cp trivyfilescan.txt s3://sonar-180-06.s3.amazonaws.com/sonar1/trivyfilescan.txt
      - echo "Trivy file scan results copied to S3."

      - echo "Copying Trivy image scan results to S3..."
      - aws s3 cp trivyimage.txt s3://sonar-180-06.s3.amazonaws.com/sonar1/trivyimage.txt
      - echo "Trivy image scan results copied to S3."

      - echo "Copying Dependency-Check reports to S3..."
      - aws s3 cp dependency-check/bin/reports/ s3://sonar-180-06.s3.amazonaws.com/sonar1/reports/ --recursive
      - echo "Dependency-Check reports copied to S3."

artifacts:
  files:
    - appspec.yaml
    - trivyfilescan.txt
    - trivyimage.txt
    - dependency-check/bin/reports/*
